# -*- coding: utf-8 -*-
"""Clustering Jerárquico​-DavidJimenez-CesarMartinez.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z4XAZT_Uuu5_MX7F7xAByOeXnAuEPGuH

Estudiantes: David Ricardo Jimenez Nuñez-Cesar Martinez Andrade
"""

# Import necesarios como siempre
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.cluster.hierarchy import linkage, dendrogram, fcluster
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler

# Cargar el dataset Iris
data = load_iris()
X = data.data
labels_true = data.target

# Normalizar los datos
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Generar el dendrograma usando diferentes métodos de enlace
methods = ['single', 'complete', 'average', 'ward']
plt.figure(figsize=(12, 8))
for i, method in enumerate(methods, 1):
    plt.subplot(2, 2, i)
    Z = linkage(X_scaled, method=method)
    dendrogram(Z, truncate_mode='level', p=5)
    plt.title(f'Dendrograma - Método {method}')
plt.tight_layout()
plt.show()

# Seleccionar un método y determinar clusters
optimal_method = 'ward'
Z_optimal = linkage(X_scaled, method=optimal_method)
thresh = 7  # Umbral para corte en dendrograma
clusters = fcluster(Z_optimal, thresh, criterion='distance')

# Visualizar resultados en scatter plot con PCA
from sklearn.decomposition import PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
plt.figure(figsize=(8, 5))
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=clusters, palette='viridis', legend='full')
plt.title(f'Clusters obtenidos con enlace {optimal_method}')
plt.xlabel('Componente Principal 1')
plt.ylabel('Componente Principal 2')
plt.show()